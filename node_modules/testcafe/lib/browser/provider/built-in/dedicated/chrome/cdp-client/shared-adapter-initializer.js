"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const execution_context_1 = __importDefault(require("./execution-context"));
const clients_manager_1 = require("./clients-manager");
const adapter_1 = require("../../../../../../shared/adapter");
const domUtils = __importStar(require("./utils/dom-utils"));
const positionUtils = __importStar(require("./utils/position-utils"));
const styleUtils = __importStar(require("./utils/style-utils"));
const eventUtils = __importStar(require("./utils/event-utils"));
adapter_1.initializeAdapter({
    PromiseCtor: Promise,
    nativeMethods: {
        setTimeout,
        clearTimeout,
        arrayIndexOf: Array.prototype.indexOf,
        arraySplice: Array.prototype.splice,
        arraySlice: Array.prototype.slice,
        arrayFilter: Array.prototype.filter,
        objectAssign: Object.assign,
        objectKeys: Object.keys,
        dateNow: Date.now,
    },
    scroll: async (el, opts) => {
        let currCxt = execution_context_1.default.current;
        let result = null;
        let margin = void 0;
        do {
            const { exceptionDetails, result: resultObj } = await clients_manager_1.getClient().Runtime.callFunctionOn({
                returnByValue: true,
                awaitPromise: true,
                executionContextId: execution_context_1.default.getCurrentContextId(),
                arguments: [{ objectId: el.objectId }, { value: opts }, { value: margin }],
                functionDeclaration: `function (el, opts) {
                    return window["%proxyless%"].scroll(el, opts);
                }`,
            });
            if (exceptionDetails)
                throw exceptionDetails;
            const scrollResult = resultObj.value;
            if (currCxt && currCxt !== currCxt.parent) {
                // TODO:
                //el           = findIframeByWindow(currCxt);
                currCxt = currCxt.parent;
                result = result !== null && result !== void 0 ? result : scrollResult.scrollWasPerformed;
                margin = scrollResult.maxScrollMargin;
                opts.offsetX = scrollResult.offsetX;
                opts.offsetY = scrollResult.offsetY;
            }
        } while (currCxt && currCxt !== currCxt.parent);
        return result;
    },
    browser: { isChrome: true },
    featureDetection: {
        isTouchDevice: false,
    },
    createEventSequence: () => {
        return {
            run: () => { },
        };
    },
    sendRequestToFrame: () => { },
    getElementExceptUI: positionUtils.getElementFromPoint,
    dom: domUtils,
    position: positionUtils,
    style: styleUtils,
    event: eventUtils,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkLWFkYXB0ZXItaW5pdGlhbGl6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvYnJvd3Nlci9wcm92aWRlci9idWlsdC1pbi9kZWRpY2F0ZWQvY2hyb21lL2NkcC1jbGllbnQvc2hhcmVkLWFkYXB0ZXItaW5pdGlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNEVBQW1EO0FBR25ELHVEQUE4QztBQUM5Qyw4REFBcUU7QUFHckUsNERBQThDO0FBQzlDLHNFQUF3RDtBQUN4RCxnRUFBa0Q7QUFDbEQsZ0VBQWtEO0FBR2xELDJCQUFpQixDQUFDO0lBQ2QsV0FBVyxFQUFFLE9BQU87SUFFcEIsYUFBYSxFQUFFO1FBQ1gsVUFBVTtRQUNWLFlBQVk7UUFDWixZQUFZLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPO1FBQ3JDLFdBQVcsRUFBRyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU07UUFDcEMsVUFBVSxFQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSztRQUNuQyxXQUFXLEVBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNO1FBQ3BDLFlBQVksRUFBRSxNQUFNLENBQUMsTUFBTTtRQUMzQixVQUFVLEVBQUksTUFBTSxDQUFDLElBQUk7UUFDekIsT0FBTyxFQUFPLElBQUksQ0FBQyxHQUFHO0tBQ3pCO0lBRUQsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFjLEVBQUUsSUFBbUIsRUFBRSxFQUFFO1FBQ2xELElBQUksT0FBTyxHQUFHLDJCQUFnQixDQUFDLE9BQWtDLENBQUM7UUFDbEUsSUFBSSxNQUFNLEdBQUksSUFBc0IsQ0FBQztRQUNyQyxJQUFJLE1BQU0sR0FBSSxLQUFLLENBQXNDLENBQUM7UUFFMUQsR0FBRztZQUNDLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsTUFBTSwyQkFBUyxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQztnQkFDckYsYUFBYSxFQUFRLElBQUk7Z0JBQ3pCLFlBQVksRUFBUyxJQUFJO2dCQUN6QixrQkFBa0IsRUFBRywyQkFBZ0IsQ0FBQyxtQkFBbUIsRUFBRTtnQkFDM0QsU0FBUyxFQUFZLENBQUMsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDO2dCQUNwRixtQkFBbUIsRUFBRTs7a0JBRW5CO2FBQ0wsQ0FBQyxDQUFDO1lBRUgsSUFBSSxnQkFBZ0I7Z0JBQ2hCLE1BQU0sZ0JBQWdCLENBQUM7WUFFM0IsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDLEtBQThCLENBQUM7WUFFOUQsSUFBSSxPQUFPLElBQUksT0FBTyxLQUFLLE9BQU8sQ0FBQyxNQUFNLEVBQUU7Z0JBQ3ZDLFFBQVE7Z0JBQ1IsNkNBQTZDO2dCQUM3QyxPQUFPLEdBQVEsT0FBTyxDQUFDLE1BQU0sQ0FBQztnQkFDOUIsTUFBTSxHQUFTLE1BQU0sYUFBTixNQUFNLGNBQU4sTUFBTSxHQUFJLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQztnQkFDekQsTUFBTSxHQUFTLFlBQVksQ0FBQyxlQUFlLENBQUM7Z0JBQzVDLElBQUksQ0FBQyxPQUFPLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQztnQkFDcEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO2FBQ3ZDO1NBRUosUUFDTSxPQUFPLElBQUksT0FBTyxLQUFLLE9BQU8sQ0FBQyxNQUFNLEVBQUU7UUFFOUMsT0FBTyxNQUFpQixDQUFDO0lBQzdCLENBQUM7SUFFRCxPQUFPLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBRTNCLGdCQUFnQixFQUFFO1FBQ2QsYUFBYSxFQUFFLEtBQUs7S0FDdkI7SUFFRCxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7UUFDdEIsT0FBTztZQUNILEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRSxDQUFDO1NBQ2hCLENBQUM7SUFDTixDQUFDO0lBRUQsa0JBQWtCLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUU3QixrQkFBa0IsRUFBRSxhQUFhLENBQUMsbUJBQW1CO0lBQ3JELEdBQUcsRUFBaUIsUUFBUTtJQUM1QixRQUFRLEVBQVksYUFBYTtJQUNqQyxLQUFLLEVBQWUsVUFBVTtJQUM5QixLQUFLLEVBQWUsVUFBVTtDQUNqQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXhlY3V0aW9uQ29udGV4dCBmcm9tICcuL2V4ZWN1dGlvbi1jb250ZXh0JztcbmltcG9ydCB7IFNlcnZlck5vZGUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IFNjcm9sbE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi90ZXN0LXJ1bi9jb21tYW5kcy9vcHRpb25zJztcbmltcG9ydCB7IGdldENsaWVudCB9IGZyb20gJy4vY2xpZW50cy1tYW5hZ2VyJztcbmltcG9ydCB7IGluaXRpYWxpemVBZGFwdGVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vc2hhcmVkL2FkYXB0ZXInO1xuaW1wb3J0IHsgTGVmdFRvcFZhbHVlcyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uLy4uL3NoYXJlZC91dGlscy92YWx1ZXMvYXhpcy12YWx1ZXMnO1xuaW1wb3J0IHsgU2Nyb2xsUmVzdWx0UHJveHlsZXNzIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vY2xpZW50L2NvcmUvc2Nyb2xsJztcbmltcG9ydCAqIGFzIGRvbVV0aWxzIGZyb20gJy4vdXRpbHMvZG9tLXV0aWxzJztcbmltcG9ydCAqIGFzIHBvc2l0aW9uVXRpbHMgZnJvbSAnLi91dGlscy9wb3NpdGlvbi11dGlscyc7XG5pbXBvcnQgKiBhcyBzdHlsZVV0aWxzIGZyb20gJy4vdXRpbHMvc3R5bGUtdXRpbHMnO1xuaW1wb3J0ICogYXMgZXZlbnRVdGlscyBmcm9tICcuL3V0aWxzL2V2ZW50LXV0aWxzJztcblxuXG5pbml0aWFsaXplQWRhcHRlcih7XG4gICAgUHJvbWlzZUN0b3I6IFByb21pc2UsXG5cbiAgICBuYXRpdmVNZXRob2RzOiB7XG4gICAgICAgIHNldFRpbWVvdXQsXG4gICAgICAgIGNsZWFyVGltZW91dCxcbiAgICAgICAgYXJyYXlJbmRleE9mOiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZixcbiAgICAgICAgYXJyYXlTcGxpY2U6ICBBcnJheS5wcm90b3R5cGUuc3BsaWNlLFxuICAgICAgICBhcnJheVNsaWNlOiAgIEFycmF5LnByb3RvdHlwZS5zbGljZSxcbiAgICAgICAgYXJyYXlGaWx0ZXI6ICBBcnJheS5wcm90b3R5cGUuZmlsdGVyLFxuICAgICAgICBvYmplY3RBc3NpZ246IE9iamVjdC5hc3NpZ24sXG4gICAgICAgIG9iamVjdEtleXM6ICAgT2JqZWN0LmtleXMsXG4gICAgICAgIGRhdGVOb3c6ICAgICAgRGF0ZS5ub3csXG4gICAgfSxcblxuICAgIHNjcm9sbDogYXN5bmMgKGVsOiBTZXJ2ZXJOb2RlLCBvcHRzOiBTY3JvbGxPcHRpb25zKSA9PiB7XG4gICAgICAgIGxldCBjdXJyQ3h0ID0gRXhlY3V0aW9uQ29udGV4dC5jdXJyZW50IGFzIEV4ZWN1dGlvbkNvbnRleHQgfCBudWxsO1xuICAgICAgICBsZXQgcmVzdWx0ICA9IG51bGwgYXMgYm9vbGVhbiB8IG51bGw7XG4gICAgICAgIGxldCBtYXJnaW4gID0gdm9pZCAwIGFzIHVuZGVmaW5lZCB8IExlZnRUb3BWYWx1ZXM8bnVtYmVyPjtcblxuICAgICAgICBkbyB7XG4gICAgICAgICAgICBjb25zdCB7IGV4Y2VwdGlvbkRldGFpbHMsIHJlc3VsdDogcmVzdWx0T2JqIH0gPSBhd2FpdCBnZXRDbGllbnQoKS5SdW50aW1lLmNhbGxGdW5jdGlvbk9uKHtcbiAgICAgICAgICAgICAgICByZXR1cm5CeVZhbHVlOiAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgIGF3YWl0UHJvbWlzZTogICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgZXhlY3V0aW9uQ29udGV4dElkOiAgRXhlY3V0aW9uQ29udGV4dC5nZXRDdXJyZW50Q29udGV4dElkKCksXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzOiAgICAgICAgICAgW3sgb2JqZWN0SWQ6IGVsLm9iamVjdElkIH0sIHsgdmFsdWU6IG9wdHMgfSwgeyB2YWx1ZTogbWFyZ2luIH1dLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uRGVjbGFyYXRpb246IGBmdW5jdGlvbiAoZWwsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvd1tcIiVwcm94eWxlc3MlXCJdLnNjcm9sbChlbCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgfWAsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGV4Y2VwdGlvbkRldGFpbHMpXG4gICAgICAgICAgICAgICAgdGhyb3cgZXhjZXB0aW9uRGV0YWlscztcblxuICAgICAgICAgICAgY29uc3Qgc2Nyb2xsUmVzdWx0ID0gcmVzdWx0T2JqLnZhbHVlIGFzIFNjcm9sbFJlc3VsdFByb3h5bGVzcztcblxuICAgICAgICAgICAgaWYgKGN1cnJDeHQgJiYgY3VyckN4dCAhPT0gY3VyckN4dC5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOlxuICAgICAgICAgICAgICAgIC8vZWwgICAgICAgICAgID0gZmluZElmcmFtZUJ5V2luZG93KGN1cnJDeHQpO1xuICAgICAgICAgICAgICAgIGN1cnJDeHQgICAgICA9IGN1cnJDeHQucGFyZW50O1xuICAgICAgICAgICAgICAgIHJlc3VsdCAgICAgICA9IHJlc3VsdCA/PyBzY3JvbGxSZXN1bHQuc2Nyb2xsV2FzUGVyZm9ybWVkO1xuICAgICAgICAgICAgICAgIG1hcmdpbiAgICAgICA9IHNjcm9sbFJlc3VsdC5tYXhTY3JvbGxNYXJnaW47XG4gICAgICAgICAgICAgICAgb3B0cy5vZmZzZXRYID0gc2Nyb2xsUmVzdWx0Lm9mZnNldFg7XG4gICAgICAgICAgICAgICAgb3B0cy5vZmZzZXRZID0gc2Nyb2xsUmVzdWx0Lm9mZnNldFk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoY3VyckN4dCAmJiBjdXJyQ3h0ICE9PSBjdXJyQ3h0LnBhcmVudCk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdCBhcyBib29sZWFuO1xuICAgIH0sXG5cbiAgICBicm93c2VyOiB7IGlzQ2hyb21lOiB0cnVlIH0sXG5cbiAgICBmZWF0dXJlRGV0ZWN0aW9uOiB7XG4gICAgICAgIGlzVG91Y2hEZXZpY2U6IGZhbHNlLFxuICAgIH0sXG5cbiAgICBjcmVhdGVFdmVudFNlcXVlbmNlOiAoKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBydW46ICgpID0+IHt9LFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBzZW5kUmVxdWVzdFRvRnJhbWU6ICgpID0+IHsgfSxcblxuICAgIGdldEVsZW1lbnRFeGNlcHRVSTogcG9zaXRpb25VdGlscy5nZXRFbGVtZW50RnJvbVBvaW50LFxuICAgIGRvbTogICAgICAgICAgICAgICAgZG9tVXRpbHMsXG4gICAgcG9zaXRpb246ICAgICAgICAgICBwb3NpdGlvblV0aWxzLFxuICAgIHN0eWxlOiAgICAgICAgICAgICAgc3R5bGVVdGlscyxcbiAgICBldmVudDogICAgICAgICAgICAgIGV2ZW50VXRpbHMsXG59KTtcbiJdfQ==